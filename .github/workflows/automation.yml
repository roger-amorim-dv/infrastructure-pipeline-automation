name: Infrastructure Automation Workflow

on:
  workflow_dispatch:
    inputs:
      application_name:
        description: 'Application Name'
        required: true
        default: 'Ex: my_application_name'
      event_rule_expression:
        description: 'Event Rule Expression'
        required: true
        default: 'Ex: rate(10 minutes)'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and deploy
        run: |
          echo "Building and deploying for ${{ github.event.inputs.environment }}"
          echo "Building and deploying for ${{ github.event.inputs.event_rule_expression }}"

      - name: Execute shell script
        run: |
          chmod +x ./scripts/automation_script.sh && ./scripts/automation_script.sh

      - name: Create Pull Request
        env:
          APPLICATION_NAME: ${{ github.event.inputs.application_name }}
          EVENT_RULE_EXPRESSION: ${{ github.event.inputs.event_rule_expression }}
        run: |
          # Create the Terraform file
          cat > terraform/services/${APPLICATION_NAME}.tf <<EOF
          resource "aws_lambda_function" "application_name" {
            function_name = "\${var.project}-${APPLICATION_NAME}"
            role          = aws_iam_role.application_name.arn
            handler       = "index.handler"
            runtime       = "nodejs14.x"
            timeout       = 60

            lifecycle {
              create_before_destroy = true
            }
          }

          resource "aws_iam_role" "application_name" {
            name = "\${var.project}-${APPLICATION_NAME}-role"

            assume_role_policy = <<EOF
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "",
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "lambda.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }
            EOF
          }
          EOF

          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Add the file to the repository
          git add terraform/services/${APPLICATION_NAME}.tf
          git commit -m "Add Terraform file for ${APPLICATION_NAME}"

          # Push the changes to a new branch
          git remote add origin https://github.com/${{ github.repository }}
          git branch pr-branch
          git push --set-upstream origin pr-branch

          # Create the pull request
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.SECRET }}" \
            -H "Content-Type: application/json" \
            -d '{
              "title": "Update Lambda Function for ${APPLICATION_NAME}",
              "body": "This pull request updates the Lambda function for ${APPLICATION_NAME}.",
              "head": "pr-branch",
              "base": "main",
              "maintainer_can_modify": true,
              "draft": true
            }' \
            "https://api.github.com/repos/${{ github.repository }}/pulls"
